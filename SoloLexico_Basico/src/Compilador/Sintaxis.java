
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 04 21:36:18 COT 2022
//----------------------------------------------------

package Compilador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 04 21:36:18 COT 2022
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\011\000\002\002" +
    "\016\000\002\002\007\000\002\002\011\000\002\002\010" +
    "\000\002\002\002\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\003\000\002" +
    "\004\005\000\002\004\005\000\002\004\007\000\002\004" +
    "\007\000\002\004\011\000\002\004\007\000\002\004\011" +
    "\000\002\004\006\000\002\004\006\000\002\004\010\000" +
    "\002\004\010\000\002\004\011\000\002\004\011\000\002" +
    "\022\003\000\002\022\004\000\002\023\004\000\002\023" +
    "\005\000\002\031\003\000\002\031\004\000\002\030\003" +
    "\000\002\030\004\000\002\007\003\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\006\000\002" +
    "\007\007\000\002\005\011\000\002\006\015\000\002\012" +
    "\011\000\002\013\012\000\002\013\011\000\002\014\005" +
    "\000\002\014\004\000\002\014\004\000\002\011\011\000" +
    "\002\010\013\000\002\033\003\000\002\033\004\000\002" +
    "\032\004\000\002\015\011\000\002\015\014\000\002\016" +
    "\013\000\002\017\011\000\002\017\012\000\002\021\003" +
    "\000\002\021\004\000\002\020\010\000\002\020\007\000" +
    "\002\027\006\000\002\026\007\000\002\025\006\000\002" +
    "\025\007\000\002\025\006\000\002\025\005\000\002\025" +
    "\006\000\002\024\005\000\002\034\005\000\002\034\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\012\002\ufffb\015\007\040\005\047\004\001" +
    "\002\000\004\040\324\001\002\000\004\031\310\001\002" +
    "\000\004\002\307\001\002\000\004\040\010\001\002\000" +
    "\004\031\011\001\002\000\004\032\012\001\002\000\004" +
    "\034\013\001\002\000\032\006\030\007\031\010\033\012" +
    "\036\013\041\014\014\015\023\033\037\035\025\050\035" +
    "\054\042\067\034\001\002\000\004\031\254\001\002\000" +
    "\030\006\ufff3\007\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\035\ufff3\050\ufff3\051\ufff3\054\ufff3\001\002\000" +
    "\030\006\uffec\007\uffec\010\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\035\uffec\050\uffec\051\uffec\054\uffec\001\002\000" +
    "\030\006\ufff9\007\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\035\ufff9\050\ufff9\051\ufff9\054\ufff9\001\002\000" +
    "\026\006\030\007\031\010\033\012\036\013\041\014\014" +
    "\015\023\035\253\050\035\054\042\001\002\000\030\006" +
    "\uffe9\007\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\035\uffe9\050\uffe9\051\uffe9\054\uffe9\001\002\000\030\006" +
    "\uffea\007\uffea\010\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\035\uffea\050\uffea\051\uffea\054\uffea\001\002\000\004\043" +
    "\246\001\002\000\030\006\ufff7\007\ufff7\010\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\015\ufff7\035\ufff7\050\ufff7\051\ufff7\054" +
    "\ufff7\001\002\000\004\002\ufffc\001\002\000\030\006\uffee" +
    "\007\uffee\010\uffee\012\uffee\013\uffee\014\uffee\015\uffee\035" +
    "\uffee\050\uffee\051\uffee\054\uffee\001\002\000\030\006\ufff5" +
    "\007\ufff5\010\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\035" +
    "\ufff5\050\ufff5\051\ufff5\054\ufff5\001\002\000\006\027\223" +
    "\043\224\001\002\000\004\043\204\001\002\000\030\006" +
    "\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\035\ufff1\050\ufff1\051\ufff1\054\ufff1\001\002\000\004\031" +
    "\172\001\002\000\006\043\167\044\166\001\002\000\004" +
    "\031\144\001\002\000\004\034\134\001\002\000\004\031" +
    "\114\001\002\000\030\006\uffef\007\uffef\010\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\035\uffef\050\uffef\051\uffef\054" +
    "\uffef\001\002\000\004\031\064\001\002\000\004\031\043" +
    "\001\002\000\004\005\044\001\002\000\004\110\046\001" +
    "\002\000\004\005\052\001\002\000\004\043\051\001\002" +
    "\000\006\005\uffc3\110\046\001\002\000\004\005\uffc2\001" +
    "\002\000\006\005\uffc1\110\uffc1\001\002\000\004\105\053" +
    "\001\002\000\004\106\056\001\002\000\004\032\062\001" +
    "\002\000\006\032\uffdb\106\056\001\002\000\004\043\057" +
    "\001\002\000\010\032\uffd9\105\060\106\uffd9\001\002\000" +
    "\006\032\uffd8\106\uffd8\001\002\000\004\032\uffda\001\002" +
    "\000\004\041\063\001\002\000\030\006\uffbe\007\uffbe\010" +
    "\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\035\uffbe\050\uffbe" +
    "\051\uffbe\054\uffbe\001\002\000\006\030\066\043\067\001" +
    "\002\000\004\032\100\001\002\000\006\032\uffd3\041\uffd3" +
    "\001\002\000\004\025\070\001\002\000\012\005\072\030" +
    "\073\043\074\044\071\001\002\000\006\032\uffd1\041\uffd1" +
    "\001\002\000\006\005\075\043\076\001\002\000\006\032" +
    "\uffd2\041\uffd2\001\002\000\006\032\uffd0\041\uffd0\001\002" +
    "\000\006\032\uffcf\041\uffcf\001\002\000\004\005\077\001" +
    "\002\000\006\032\uffce\041\uffce\001\002\000\004\034\101" +
    "\001\002\000\030\006\030\007\031\010\033\012\036\013" +
    "\041\014\014\015\023\033\037\050\035\054\042\067\034" +
    "\001\002\000\026\006\030\007\031\010\033\012\036\013" +
    "\041\014\014\015\023\035\110\050\035\054\042\001\002" +
    "\000\030\006\ufff4\007\ufff4\010\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\035\ufff4\050\ufff4\051\ufff4\054\ufff4\001\002" +
    "\000\030\006\uffed\007\uffed\010\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\035\uffed\050\uffed\051\uffed\054\uffed\001\002" +
    "\000\030\006\ufffa\007\ufffa\010\ufffa\012\ufffa\013\ufffa\014" +
    "\ufffa\015\ufffa\035\ufffa\050\ufffa\051\ufffa\054\ufffa\001\002" +
    "\000\030\006\uffeb\007\uffeb\010\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\035\uffeb\050\uffeb\051\uffeb\054\uffeb\001\002" +
    "\000\030\006\ufff8\007\ufff8\010\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\035\ufff8\050\ufff8\051\ufff8\054\ufff8\001\002" +
    "\000\030\006\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\035\uffc5\050\uffc5\051\uffc5\054\uffc5\001\002" +
    "\000\030\006\ufff6\007\ufff6\010\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\035\ufff6\050\ufff6\051\ufff6\054\ufff6\001\002" +
    "\000\030\006\ufff2\007\ufff2\010\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\035\ufff2\050\ufff2\051\ufff2\054\ufff2\001\002" +
    "\000\030\006\ufff0\007\ufff0\010\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\015\ufff0\035\ufff0\050\ufff0\051\ufff0\054\ufff0\001\002" +
    "\000\004\005\115\001\002\000\004\043\116\001\002\000" +
    "\006\005\117\110\046\001\002\000\004\032\132\001\002" +
    "\000\004\005\121\001\002\000\004\105\122\001\002\000" +
    "\004\043\125\001\002\000\006\032\uffd7\106\056\001\002" +
    "\000\004\032\127\001\002\000\010\032\uffd5\105\126\106" +
    "\uffd5\001\002\000\006\032\uffd4\106\uffd4\001\002\000\004" +
    "\041\130\001\002\000\030\006\uffbf\007\uffbf\010\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\015\uffbf\035\uffbf\050\uffbf\051\uffbf" +
    "\054\uffbf\001\002\000\004\032\uffd6\001\002\000\004\041" +
    "\133\001\002\000\030\006\uffc0\007\uffc0\010\uffc0\012\uffc0" +
    "\013\uffc0\014\uffc0\015\uffc0\035\uffc0\050\uffc0\051\uffc0\054" +
    "\uffc0\001\002\000\030\006\030\007\031\010\033\012\036" +
    "\013\041\014\014\015\023\033\037\050\035\054\042\067" +
    "\034\001\002\000\026\006\030\007\031\010\033\012\036" +
    "\013\041\014\014\015\023\035\136\050\035\054\042\001" +
    "\002\000\004\013\137\001\002\000\004\031\140\001\002" +
    "\000\006\030\066\043\067\001\002\000\004\032\142\001" +
    "\002\000\004\041\143\001\002\000\030\006\uffc4\007\uffc4" +
    "\010\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\035\uffc4\050" +
    "\uffc4\051\uffc4\054\uffc4\001\002\000\004\043\145\001\002" +
    "\000\004\032\146\001\002\000\004\034\147\001\002\000" +
    "\004\100\150\001\002\000\004\044\157\001\002\000\010" +
    "\035\uffbb\062\uffbb\100\150\001\002\000\006\035\153\062" +
    "\154\001\002\000\030\006\uffbd\007\uffbd\010\uffbd\012\uffbd" +
    "\013\uffbd\014\uffbd\015\uffbd\035\uffbd\050\uffbd\051\uffbd\054" +
    "\uffbd\001\002\000\004\035\155\001\002\000\030\006\uffbc" +
    "\007\uffbc\010\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\035" +
    "\uffbc\050\uffbc\051\uffbc\054\uffbc\001\002\000\006\035\uffba" +
    "\062\uffba\001\002\000\004\107\160\001\002\000\032\006" +
    "\030\007\031\010\033\012\036\013\041\014\014\015\023" +
    "\033\037\050\035\051\162\054\042\067\034\001\002\000" +
    "\026\006\030\007\031\010\033\012\036\013\041\014\014" +
    "\015\023\050\035\051\164\054\042\001\002\000\004\041" +
    "\163\001\002\000\010\035\uffb8\062\uffb8\100\uffb8\001\002" +
    "\000\004\041\165\001\002\000\010\035\uffb9\062\uffb9\100" +
    "\uffb9\001\002\000\004\041\171\001\002\000\004\041\170" +
    "\001\002\000\030\006\uffae\007\uffae\010\uffae\012\uffae\013" +
    "\uffae\014\uffae\015\uffae\035\uffae\050\uffae\051\uffae\054\uffae" +
    "\001\002\000\030\006\uffaf\007\uffaf\010\uffaf\012\uffaf\013" +
    "\uffaf\014\uffaf\015\uffaf\035\uffaf\050\uffaf\051\uffaf\054\uffaf" +
    "\001\002\000\006\030\066\043\067\001\002\000\004\032" +
    "\174\001\002\000\004\034\175\001\002\000\030\006\030" +
    "\007\031\010\033\012\036\013\041\014\014\015\023\033" +
    "\037\050\035\054\042\067\034\001\002\000\026\006\030" +
    "\007\031\010\033\012\036\013\041\014\014\015\023\035" +
    "\177\050\035\054\042\001\002\000\032\006\uffcd\007\uffcd" +
    "\010\uffcd\011\200\012\uffcd\013\uffcd\014\uffcd\015\uffcd\035" +
    "\uffcd\050\uffcd\051\uffcd\054\uffcd\001\002\000\004\034\201" +
    "\001\002\000\030\006\030\007\031\010\033\012\036\013" +
    "\041\014\014\015\023\033\037\050\035\054\042\067\034" +
    "\001\002\000\026\006\030\007\031\010\033\012\036\013" +
    "\041\014\014\015\023\035\203\050\035\054\042\001\002" +
    "\000\030\006\uffcc\007\uffcc\010\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\035\uffcc\050\uffcc\051\uffcc\054\uffcc\001\002" +
    "\000\006\017\206\026\205\001\002\000\004\005\215\001" +
    "\002\000\004\005\207\001\002\000\006\005\210\043\211" +
    "\001\002\000\004\041\214\001\002\000\004\005\212\001" +
    "\002\000\004\041\213\001\002\000\030\006\uffdc\007\uffdc" +
    "\010\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\035\uffdc\050" +
    "\uffdc\051\uffdc\054\uffdc\001\002\000\030\006\uffde\007\uffde" +
    "\010\uffde\012\uffde\013\uffde\014\uffde\015\uffde\035\uffde\050" +
    "\uffde\051\uffde\054\uffde\001\002\000\006\005\216\043\217" +
    "\001\002\000\004\041\222\001\002\000\004\005\220\001" +
    "\002\000\004\041\221\001\002\000\030\006\uffdd\007\uffdd" +
    "\010\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\035\uffdd\050" +
    "\uffdd\051\uffdd\054\uffdd\001\002\000\030\006\uffdf\007\uffdf" +
    "\010\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\035\uffdf\050" +
    "\uffdf\051\uffdf\054\uffdf\001\002\000\004\043\244\001\002" +
    "\000\012\017\230\026\225\027\227\041\226\001\002\000" +
    "\004\044\237\001\002\000\030\006\uffe7\007\uffe7\010\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\035\uffe7\050\uffe7\051" +
    "\uffe7\054\uffe7\001\002\000\004\041\236\001\002\000\004" +
    "\044\231\001\002\000\006\041\232\042\233\001\002\000" +
    "\030\006\uffe3\007\uffe3\010\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\035\uffe3\050\uffe3\051\uffe3\054\uffe3\001\002\000" +
    "\004\044\234\001\002\000\004\041\235\001\002\000\030" +
    "\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\035\uffe2\050\uffe2\051\uffe2\054\uffe2\001\002\000\030" +
    "\006\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\035\uffe1\050\uffe1\051\uffe1\054\uffe1\001\002\000\006" +
    "\041\240\042\241\001\002\000\030\006\uffe6\007\uffe6\010" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\035\uffe6\050\uffe6" +
    "\051\uffe6\054\uffe6\001\002\000\004\044\242\001\002\000" +
    "\004\041\243\001\002\000\030\006\uffe4\007\uffe4\010\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\015\uffe4\035\uffe4\050\uffe4\051" +
    "\uffe4\054\uffe4\001\002\000\004\041\245\001\002\000\030" +
    "\006\uffe0\007\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\035\uffe0\050\uffe0\051\uffe0\054\uffe0\001\002\000\006" +
    "\017\250\041\247\001\002\000\030\006\uffe8\007\uffe8\010" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\035\uffe8\050\uffe8" +
    "\051\uffe8\054\uffe8\001\002\000\004\044\251\001\002\000" +
    "\004\041\252\001\002\000\030\006\uffe5\007\uffe5\010\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\035\uffe5\050\uffe5\051" +
    "\uffe5\054\uffe5\001\002\000\004\002\000\001\002\000\006" +
    "\006\256\043\257\001\002\000\004\032\303\001\002\000" +
    "\004\043\274\001\002\000\004\017\260\001\002\000\004" +
    "\044\261\001\002\000\004\041\262\001\002\000\006\030" +
    "\066\043\067\001\002\000\004\041\264\001\002\000\006" +
    "\027\266\043\267\001\002\000\004\032\uffc9\001\002\000" +
    "\004\043\273\001\002\000\006\026\270\027\271\001\002" +
    "\000\004\044\272\001\002\000\004\032\uffc7\001\002\000" +
    "\004\032\uffc8\001\002\000\004\032\uffc6\001\002\000\004" +
    "\017\275\001\002\000\004\044\276\001\002\000\004\041" +
    "\277\001\002\000\006\030\066\043\067\001\002\000\004" +
    "\041\301\001\002\000\006\027\266\043\267\001\002\000" +
    "\004\032\uffca\001\002\000\004\034\304\001\002\000\030" +
    "\006\030\007\031\010\033\012\036\013\041\014\014\015" +
    "\023\033\037\050\035\054\042\067\034\001\002\000\026" +
    "\006\030\007\031\010\033\012\036\013\041\014\014\015" +
    "\023\035\306\050\035\054\042\001\002\000\030\006\uffcb" +
    "\007\uffcb\010\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\035" +
    "\uffcb\050\uffcb\051\uffcb\054\uffcb\001\002\000\004\002\001" +
    "\001\002\000\004\032\311\001\002\000\004\034\312\001" +
    "\002\000\032\006\030\007\031\010\033\012\036\013\041" +
    "\014\014\015\023\033\037\035\314\050\035\054\042\067" +
    "\034\001\002\000\026\006\030\007\031\010\033\012\036" +
    "\013\041\014\014\015\023\035\315\050\035\054\042\001" +
    "\002\000\004\002\ufffe\001\002\000\004\047\316\001\002" +
    "\000\004\040\317\001\002\000\004\031\320\001\002\000" +
    "\004\032\321\001\002\000\004\034\322\001\002\000\004" +
    "\035\323\001\002\000\004\002\uffff\001\002\000\004\031" +
    "\325\001\002\000\004\032\326\001\002\000\004\034\327" +
    "\001\002\000\030\006\030\007\031\010\033\012\036\013" +
    "\041\014\014\015\023\033\037\050\035\054\042\067\034" +
    "\001\002\000\026\006\030\007\031\010\033\012\036\013" +
    "\041\014\014\015\023\035\331\050\035\054\042\001\002" +
    "\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\017\004\016\005\023\006\026\010\031\011\014\012\037" +
    "\015\025\016\015\017\021\034\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\104\005\106\006\110\010\111\011\102\012" +
    "\112\016\103\017\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\032\046\033\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\046\033" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\053\023\054\001\001\000\002\001" +
    "\001\000\006\022\060\023\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\101" +
    "\004\016\005\023\006\026\010\031\011\014\012\037\015" +
    "\025\016\015\017\021\034\020\001\001\000\022\004\104" +
    "\005\106\006\110\010\111\011\102\012\112\016\103\017" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\122\031\123\001\001\000\006\022\130\023" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\134" +
    "\004\016\005\023\006\026\010\031\011\014\012\037\015" +
    "\025\016\015\017\021\034\020\001\001\000\022\004\104" +
    "\005\106\006\110\010\111\011\102\012\112\016\103\017" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\150\021\151\001\001\000\002\001" +
    "\001\000\006\020\150\021\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\160\004\016" +
    "\005\023\006\026\010\031\011\014\012\037\015\025\016" +
    "\015\017\021\034\020\001\001\000\022\004\104\005\106" +
    "\006\110\010\111\011\102\012\112\016\103\017\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\175\004" +
    "\016\005\023\006\026\010\031\011\014\012\037\015\025" +
    "\016\015\017\021\034\020\001\001\000\022\004\104\005" +
    "\106\006\110\010\111\011\102\012\112\016\103\017\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\201\004\016\005\023\006\026\010\031\011\014\012\037" +
    "\015\025\016\015\017\021\034\020\001\001\000\022\004" +
    "\104\005\106\006\110\010\111\011\102\012\112\016\103" +
    "\017\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\262\001\001\000\002\001\001\000\004\014\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\277\001\001\000\002\001\001" +
    "\000\004\014\301\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\304\004\016\005\023\006\026\010\031" +
    "\011\014\012\037\015\025\016\015\017\021\034\020\001" +
    "\001\000\022\004\104\005\106\006\110\010\111\011\102" +
    "\012\112\016\103\017\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\312\004\016\005\023\006\026\010\031\011\014\012" +
    "\037\015\025\016\015\017\021\034\020\001\001\000\022" +
    "\004\104\005\106\006\110\010\111\011\102\012\112\016" +
    "\103\017\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\327\004\016\005\023\006\026\010\031\011\014\012\037" +
    "\015\025\016\015\017\021\034\020\001\001\000\022\004" +
    "\104\005\106\006\110\010\111\011\102\012\112\016\103" +
    "\017\105\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // RETURN ::= Return Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // RETURN ::= Return Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DEFAULT ::= Default Dos_puntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DEFAULT",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // UNSIGNED ::= Unsigned Short Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("UNSIGNED",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // UNSIGNED ::= Unsigned Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("UNSIGNED",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // UNSIGNED ::= Unsigned Char Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("UNSIGNED",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // UNSIGNED ::= Unsigned Short Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("UNSIGNED",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // UNSIGNED ::= Unsigned Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("UNSIGNED",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // STRUCT ::= Struct Identificador Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("STRUCT",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // USING ::= Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("USING",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CASELINE ::= Case Numero Dos_puntos Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASELINE",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CASELINE ::= Case Numero Dos_puntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASELINE",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CASE ::= CASELINE CASE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CASE ::= CASELINE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a CASE Default Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SCANF ::= Scanf Parent_a Comillas DECLARA_FORMATOS Comillas Coma INPUTS Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PRINTF ::= Printf Parent_a Comillas Identificador DECLARA_FORMATO Comillas Coma OUTPUTS Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PRINTF ::= Printf Parent_a Comillas Identificador Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARA_FORMATO ::= Declara Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARA_FORMATO",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARA_FORMATOS ::= DECLARA_FORMATO DECLARA_FORMATOS 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARA_FORMATOS",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARA_FORMATOS ::= DECLARA_FORMATO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARA_FORMATOS",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OUTPUT ::= Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OUTPUT",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OUTPUT ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OUTPUT",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OUTPUTS ::= OUTPUT INPUTS 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OUTPUTS",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OUTPUTS ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OUTPUTS",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INPUT ::= Ampersand Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INPUT",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INPUT ::= Ampersand Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INPUT",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INPUTS ::= INPUT INPUTS 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INPUTS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INPUTS ::= INPUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INPUTS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= T_dato Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= T_dato Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= RETURN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Int Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Void Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c Void Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

